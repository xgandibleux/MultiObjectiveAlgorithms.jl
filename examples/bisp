# Bi-objective shortest path problem (model)
#
# Exercise 9.5 page 269 of
# Multicriteria Optimization (2nd edt), M. Ehrgott, Springer 2005.


# ---- Packages to use
using JuMP
import GLPK
import MultiObjectiveAlgorithms as MOA


# ---- Values of the instance to solve
M  = 50
C1 =  [ M 4 5 M M M ;  # coefficients's vector for arc (i,j) of the objective 1
        M M 2 1 2 7 ;
        M M M 5 2 M ;
        M M 5 M M 3 ;
        M M M M M 4 ;
        M M M M M M  ]

C2 =  [ M 3 1 M M M ; # coefficients's vector for arc (i,j) of the objective 2
        M M 1 4 2 2 ;
        M M M 1 7 M ;
        M M 1 M M 2 ;
        M M M M M 2 ;
        M M M M M M  ]

n  = size(C2,1)       # number of nodes


# ---- setting the model
model = Model()
@variable(model, x[1:n,1:n], Bin )
@expression(model, objective1, sum(x[i,j]*C1[i,j] for i=1:n, j=1:n))
@expression(model, objective2, sum(x[i,j]*C2[i,j] for i=1:n, j=1:n) )
@objective(model, Min, [objective1, objective2])
@constraint(model, node_s, sum(x[1,j] for j = 1:n) == 1 )
@constraint(model, node_t, sum(x[i,n] for i = 1:n) == 1 )
@constraint(model, cstr[i=2:n-1], sum(x[i,j] for j = 1:n) - sum(x[j,i] for j =1:n) == 0 )


# ---- Invoking the algorithm (Epsilon Constraint method) and the IP solver (GLPK) 
set_optimizer(model, () -> MOA.Optimizer(GLPK.Optimizer))
set_optimizer_attribute(model, MOA.Algorithm(), MOA.EpsilonConstraint())
set_optimizer_attribute(model, MOA.ObjectiveAbsoluteTolerance(1), 1) # ugly name for this attribute
optimize!(model)


# ---- Querying the results
solution_summary(model)
sizeYN = result_count(model)
for i in 1:sizeYN
    print(i,": ")
    print("z=[", convert(Int64,value(objective1; result = i))," , ", convert(Int64,value(objective2; result = i)),"] | ")
    X=[value(x[l,c]; result = i) for l in 1:n, c in 1:n]
    print("Path: ")
    for ind in findall(val -> val â‰ˆ 1, X)
        i,j = ind.I
        print(" $i->$j ")
    end
    println()
end


#=
Results:
1: z=[8 , 9] | Path:  1->2  2->4  4->6 
2: z=[10 , 7] | Path:  1->2  2->5  5->6 
3: z=[11 , 5] | Path:  1->2  2->6 
4: z=[13 , 4] | Path:  1->3  3->4  4->6 
=#